@model IEnumerable<RepositorioDocumentos.Models.Area>

@{
    ViewBag.Title = "Listado de Areas";
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link href="~/Content/toastr.css" rel="stylesheet" type="text/css" />
<link href="~/Content/dataTables.bootstrap4.min.css" rel="stylesheet" />

<div class="container-fluid">
    <section class="text-dark border-custom border">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                Listado de Areas
            </h6>
        </div>

        <div class="mt-3 ml-2 mr-2">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new">Nueva Area</a>
            <table id="areaTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead>
                    <tr>
                        <th class="text-center">
                            Id
                        </th>
                        <th>
                            Dirección
                        </th>
                        <th>
                            Area
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="text-center field-id">@item.Id</td>
                            <td class="field-directorate">@item.Directorate.Description</td>
                            <td class="field-description">@item.Description</td>
                           
                            <td align="center">
                                <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                    Editar
                                </a>
                                <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                    Eliminar
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/dataTables.bootstrap4.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="~/Scripts/toastr.js"></script>

}
<script type="text/javascript">

    $(document).ready(function () {
        $("#Area").addClass("menu-active");
        $("#areaTable").DataTable();

        $('.btn-new').click(function () {
            if (!$('.save-btn')[0]) {
                 //Direcciones
                let _direcciones = @Html.Raw(Json.Encode(ViewBag.Direcciones));
                let direcciones = [];

                for (const direccion of _direcciones) {
                    direcciones.push(`<option value="${direccion.Value}">${direccion.Text}</option>`)
                }

                const newRowHtml = `<tr>` +
                    '<td class="text-center">##</td>' +
                    `<td class="field-directorate-new"><select class="form-control form-control-sm new-directorate" id="directorates"> ${direcciones} </select></td>` +
                    `<td class="field-description-new"><input type="text" maxlength="100" min="3" class="form-control form-control-sm new-description" placeholder="Area"></td>` +
                     `<td class="text-center">` +
                    `<button class="btn btn-sm btn-success save-btn">Guardar</button>` +
                    `<button class="btn btn-sm btn-danger cancel-btn">Cancelar</button>` +
                    `</td>` +
                    `</tr>`;

                $('#areaTable tbody').prepend(newRowHtml);
            }
        });

        $(document).on('click', '.save-btn', function () {
            const directorate = $(this).closest('tr').find('.new-directorate').val();
            const description = $(this).closest('tr').find('.new-description').val();

            if (!directorate || !description) {
                toastr.error("Debe completar todos los campos para guardar el registro.");
                return false;
            }

            $.ajax({
                "url": `/Area/AddArea?directorateId=${directorate}&description=${description}`,
                "type": "POST",
                "success": function (response) {
                    if (response.result === "200") {
                        toastr.success(`El registro fue agregado!`);
                        $('.field-directorate-new').text(directorate);
                        $('.field-description-new').text(description);
                        setTimeout(function () {
                            window.location.reload(true);
                        }, 1000);
                    } else {
                        toastr.error(response.message);
                    }
                }
            });
        });

        $(document).on('click', '.cancel-btn', function () {
            $(this).closest('tr').remove();
        });

        $('.edit-btn').click(function () {
            var editButton = $(this);

            if (editButton.prop('title') === "Editar") {
                editButton.prop('title', 'Guardar');
                editButton.html("Guardar");
                editButton.closest('tr').find('.btn-remove').html("Cancelar");
                editButton.closest('tr').find('.btn-remove').prop("title", "Cancelar");

                const directorate = editButton.closest('tr').find('.field-directorate').text();
                const description = editButton.closest('tr').find('.field-description').text();

                 //Direcciones
                let _direcciones = @Html.Raw(Json.Encode(ViewBag.Direcciones));
                let direcciones = [];

                for (const direccion of _direcciones) {
                    direcciones.push(`<option value="${direccion.Value}" ${directorate === direccion.Text? "selected" : ""}>${direccion.Text}</option>`)
                }

                editButton.closest('tr').find('.field-directorate').html(`<select class="form-control form-control-sm edit-directorate" id="directorates"> ${direcciones} </select>`);
                editButton.closest('tr').find('.field-description').html('<input type="text" maxlength="100" min="3" class="form-control form-control-sm edit-description" value="' + description + '">');
            } else {
                const id = editButton.closest('tr').find('.field-id').text();
                const directorateText = editButton.closest('tr').find('.edit-directorate :selected').text();
                const directorate = editButton.closest('tr').find('.edit-directorate').val();
                const description = editButton.closest('tr').find('.edit-description').val();

                if (!directorate || !description) {
                    toastr.error("Debe completar todos los campos para guardar el registro.");
                    return false;
                }

                $.ajax({
                    "url": `/Area/UpdateArea?id=${id}&directorateId=${directorate}&description=${description}`,
                    "type": "POST",
                    "success": function (response) {
                        if (response.result === "200") {
                            toastr.success(`El registro #${id} fue actualizado!`);
                            editButton.prop('title', 'Editar');
                            editButton.closest('tr').find('.field-directorate').html(directorateText);
                            editButton.closest('tr').find('.field-description').text(description);

                            editButton.html("Editar");
                            editButton.closest('tr').find('.btn-remove').html("Eliminar");
                            editButton.closest('tr').find('.btn-remove').prop("title", "Eliminar");

                        } else {
                            toastr.error(response.message);
                        }
                    }
                });
            }
        });

        $('.btn-remove').click(function () {
            var removeButton = $(this);

            if (removeButton.html() === "Cancelar") {
                window.location.reload(true);
            } else {
                const id = removeButton.closest('tr').find('.field-id').text();
                const description = removeButton.closest('tr').find('.field-description').text();

                if (confirm(`Confirma que desea eliminar el área: ${description}`)) {
                    $.ajax({
                        "url": `/Area/DeleteArea?id=${id}`,
                        "type": "POST",
                        "success": function (response) {
                            if (response.result === "200") {
                                toastr.success(`El registro #${id} fue eliminado!`);
                                setTimeout(function () {
                                    window.location.reload(true);
                                }, 1000);
                            } else {
                                toastr.error(response.message);
                            }
                        }
                    });
                }
            }
        });

        //Replace Previous -> Anterior
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('Previous', 'Anterior');
        });

        //Replace Next -> Próximo
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('Next', 'Próximo');
        });

        //Replace Showing -> Mostrando
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('Showing', 'Mostrando');
        });

        //Replace Show -> Mostrar
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('Show', 'Mostrar');
        });

        //Replace Entries -> Registros
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('entries', 'registros');
        });

        //Replace Search -> Buscar
        $('body :not(script)').contents().filter(function () {
            return this.nodeType === 3;
        }).replaceWith(function () {
            return this.nodeValue.replace('Search', 'Buscar');
        });
    });

</script>
