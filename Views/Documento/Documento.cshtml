
@{
    ViewBag.Title = "Documento";
    var employeesJson = Json.Encode(ViewBag.Employees);
    var usersJson = Json.Encode(ViewBag.Users);
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link href="~/Content/toastr.css" rel="stylesheet" type="text/css" />
<link href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" rel="stylesheet" />

<style>
    p {
        color: black;
    }

    .auto-resizing-textarea {
        width: 100%;
        min-height: 50px;
        overflow-y: hidden;
        box-sizing: border-box;
    }
</style>
<div class="container-fluid pb-5">
    <section class="bg-light text-dark border-custom">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                Documento -> Cabecera
            </h6>
        </div>

        <section class="mt-3">
            <input type="hidden" name="DocumentHeaderId" id="DocumentHeaderId" value="0" />
            <input type="hidden" name="CurrentEditor" id="CurrentEditor" value="Tiny" />

            <div class="row mb-3">
                <section class="col-xl-3 col-md-3 col-sm-12">
                    <div class="row">
                        <div class="col-12 mb-1">
                            <label for="DocumentTypeId">Tipo de Documento</label>
                            @Html.DropDownList("DocumentTypeId", new SelectList(ViewBag.DocumentoTipos, "Value", "Text"), new
                              {
                                  @class = "form-control form-control-sm col-12",
                                  @style = "border: 1px solid lightgray; color: gray;"
                              })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12 mb-1">
                            <label for="DocumentCode">Código Documento</label>
                            @Html.DropDownList("DocumentCode", new SelectList(ViewBag.DocumentoCodigos, "Value", "Text"), new
                              {
                                  @class = "form-control form-control-sm col-12",
                                  @style = "border: 1px solid lightgray; color: gray;"
                              })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-6 mb-1">
                            <label for="Revision">Revisión</label>
                            <input type="text" id="Revision" name="Revision" value="" class="form-control form-control-sm col-12" autocomplete="off" />
                        </div>
                        <div class="col-6 mb-1">
                            <label for="docDate">Fecha</label>
                            <input type="text" id="docDate" name="docDate" value="" class="form-control form-control-sm col-12 datepicker" autocomplete="off" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12 mb-1">
                            <label for="visibility">Visibilidad</label>
                            <select class="form-control form-control-sm col-12" id="Visibility">
                                <option value="false">Documento Privado</option>
                                <option value="true">Documento Público</option>
                            </select>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12 mb-1">
                            <label for="AttachmentType">Archivo Adjunto</label>
                            <select class="form-control form-control-sm col-12" id="AttachmentType">
                                <option value="false">NO</option>
                                <option value="true">SI</option>
                            </select>
                            <input type="hidden" id="Logo" name="Logo" value="Predeterminado" />
                        </div>
                    </div>

                    @*<div class="row">
                            <div class="col-12 mb-1">
                                <label for="Logo">Logo</label>
                                <input type="text" id="Logo" name="Logo" value="Predeterminado" class="form-control form-control-sm col-12" readonly />
                            </div>
                        </div>*@

                    <div class="row">
                        <div class="col-12 mb-1">
                            <label for="Status">Estatus</label>
                            <input type="text" id="Status" name="Status" value="Iniciado" class="form-control form-control-sm col-12" readonly />
                        </div>
                    </div>

                </section>

                <!--SECOND SECTION HEADER-->
                <section class="col-xl-9 col-md-9 col-sm-12" style="border-left: 3px solid lightgray">
                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="Title">Título</label>
                            <input type="text" id="Title" name="Title" value="" class="form-control form-control-sm col-12" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="DirectorateId">Dirección</label>
                            @Html.DropDownList("DirectorateId", new SelectList(ViewBag.Direcciones, "Value", "Text"), new
                               {
                                   @class = "form-control form-control-sm col-12",
                                   @style = "border: 1px solid lightgray; color: gray;",
                                   @onchange = "getAreasByDirectorateId($('#DirectorateId').val())"
                               })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="AreaId">Area</label>
                            @Html.DropDownList("AreaId", new SelectList(ViewBag.Areas, "Value", "Text"), new
                               {
                                   @class = "form-control form-control-sm col-12",
                                   @style = "border: 1px solid lightgray; color: gray;",
                                   @onchange = "getDepartmentsByAreaId($('#AreaId').val())"
                               })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="DepartmentCode">Departamento</label>
                            @Html.DropDownList("DepartmentCode", new SelectList(ViewBag.Departamentos, "Value", "Text"), new
                              {
                                  @class = "form-control form-control-sm col-12",
                                  @style = "border: 1px solid lightgray; color: gray;"
                              })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="MacroprocessId">Macroproceso</label>
                            @Html.DropDownList("MacroprocessId", new SelectList(ViewBag.Macroprocesos, "Value", "Text"), new
                               {
                                   @class = "form-control form-control-sm col-12",
                                   @style = "border: 1px solid lightgray; color: gray;",
                                   @onchange = "getProcessesByMacroprocessId($('#MacroprocessId').val())"
                               })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-11 col-md-11 col-sm-12 col- mb-1">
                            <label for="ProcessId">Proceso</label>
                            @Html.DropDownList("ProcessId", new SelectList(ViewBag.Procesos, "Value", "Text"), new
                              {
                                  @class = "form-control form-control-sm col-12",
                                  @style = "border: 1px solid lightgray; color: gray;"
                              })
                        </div>
                    </div>
                </section>

                <section class="col-12 mt-4">
                    <div class="row">
                        <div class="col-12 mb-1">
                            @*<label for="Objective">Objetivo</label>*@
                            <div class="bg-secondary text-light panel-custom border">
                                <h6 class="panel-title">
                                    Objetivo
                                </h6>
                            </div>
                            <div id="objectiveBody" class="tinyEditor" style="min-height: 100px"></div>
                            @*<textarea type="tex" id="Objective" name="Objective" maxlength="500" class="form-control form-control-sm col-12" rows="3"></textarea>*@
                        </div>
                    </div>
                </section>

            </div>

            <button id="btnNext" class="btn btn-danger col-12 mt-2 mb-2">Presione aquí para continuar</button>

        </section>
    </section>

    <!--Contenido-->
    <section class="bg-light text-dark border-custom mb-4 mt-3" id="sectionContent">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title" id="contentLabel">
                <a href="javascript:toggleComponent('btn-toggleContenido', 'wrapContenido')" id="btn-toggleContenido">-</a>
                Contenido
            </h6>
        </div>
        <div id="wrapContenido">
            <div id="contenidoBody" class="tinyEditor" style="min-height: 100px"></div>
        </div>
    </section>

    <!--Alcance-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionScope">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleScope', 'wrapScope')" id="btn-toggleScope">-</a>
                Alcance
            </h6>
        </div>
        <div id="wrapScope">
            <div id="scopeBody" class="tinyEditor" style="min-height: 100px"></div>
        </div>
    </section>

    <!--Responsabilidades-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionResponsabilities">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleResponsabilities', 'wrapResponsabilities')" id="btn-toggleResponsabilities">-</a>
                Responsabilidades
            </h6>
        </div>
        <div id="wrapResponsabilities">
            <div id="responsabilitiesBody" class="tinyEditor" style="min-height: 100px"></div>
        </div>
    </section>

    <button id="btnDetail" class="btn btn-danger col-12 mb-4 btnDetail">Guardar cambios en el detalle</button>

    <!--Glosario-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionGlossary">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleGlossary', 'wrapGlossary')" id="btn-toggleGlossary">-</a>
                Glosario
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="wrapGlossary">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-glossary">Nuevo Registro</a>
            <table id="glossaryTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th style="width:300px">
                            Palabra
                        </th>
                        <th>
                            Descripción
                        </th>
                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="glossary-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>

                        <td align="center">
                            <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                Editar
                            </a>
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>

    <!--Directrices-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionGuideline">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleGuideline', 'wrapGuideline')" id="btn-toggleGuideline">-</a>
                Directrices
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="wrapGuideline">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-guideline">Nueva Directriz</a>
            <table id="guidelineTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th style="width:100px" class="text-center">
                            #
                        </th>
                        <th>
                            Descripción
                        </th>
                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="guideline-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>

                        <td align="center">
                            <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                Editar
                            </a>
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>

    <!--Politica-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionPolicy">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-togglePolicy', 'wrapPolicy')" id="btn-togglePolicy">-</a>
                Politica
            </h6>
        </div>
        <div id="wrapPolicy">
            <div id="policyBody" class="tinyEditor" style="min-height: 100px"></div>
        </div>
    </section>

    <button class="btn btn-danger col-12 mb-4 btnDetail">Guardar cambios en la política</button>

    <!--Procedimiento-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionProcedure">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleProcedure', 'wrapProcedure')" id="btn-toggleProcedure">-</a>
                Procedimientos
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="wrapProcedure">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-procedure">Nuevo Procedimiento</a>
            <table id="procedureTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th style="width:100px" class="text-center">
                            #
                        </th>
                        <th style="width:230px">
                            Responsable
                        </th>
                        <th>
                            Descripción
                        </th>
                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="procedure-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>
                        <td></td>

                        <td align="center">
                            <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                Editar
                            </a>
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>

    <!--Referencias o Anexos-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionReference">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleReferences', 'referencesBody')" id="btn-toggleReferences">-</a>
                Referencias o Anexos
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="referencesBody">
            <form id="upload-files" class="bg-light pb-1 mb-2" enctype="multipart/form-data">

                <div class="form-row">
                    <div class="form-group ml-2 col-lg-3 col-md-3 col-sm-12">
                        <label for="ReferenceType">Tipo de Referencia/Anexo</label>
                        <br />
                        <select class="form-control form-control-sm" id="ReferenceType">
                            <option value="Archivo">Archivo</option>
                            <option value="Link">Hipervinculo</option>
                        </select>
                    </div>
                    <div class="form-group ml-2 col-lg-3 col-md-3 col-sm-12">
                        <label for="FileNameDocText" id="FileNameDocTextLabel">Nombre de archivo</label>
                        <br />
                        <input type="text" id="FileNameDocText" name="FileNameDocText" class="form-control form-control-sm d-inline" readonly />
                        <span id="SearchFileToUpload" onclick="document.getElementById('fileUploadDoc').click(); return false;" class="fa fa-search d-inline h6" style="cursor: pointer"></span>
                    </div>
                    <div class="form-group ml-2 col-lg-3 col-md-3 col-sm-12">
                        <label for="FileDescription">Descripción/Título</label>
                        <input type="text" id="FileDescription" name="FileDescription" maxlength="200" class="form-control form-control-sm" autocomplete="off" />
                    </div>
                    <div class="form-group ml-2 col-lg-2 col-md-2 col-sm-12" style="padding-top: 22px">
                        <button class="btn btn-danger btn-sm" id="SaveDocFile">Guardar</button>
                        <span id="waitingIndicatorFile" class="spinner-border text-danger float-right" style="margin-right: 5px; display: none"></span>
                    </div>
                </div>

                <div class="form-row mt-2">
                    <div class="form-group ml-2 col-lg-6 col-md-6 col-sm-12">
                        <div id="uploaded-files"></div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group mt-1 ml-2 col-lg-2 col-md-2 col-sm-12">
                        <input type="file" class="form-control-file" id="fileUploadDoc" name="file" style="display: none">
                    </div>
                </div>
            </form>

        </div>
    </section>

    <!--Notificacion de Cambios-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionChange">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleChanges', 'wrapChanges')" id="btn-toggleChanges">-</a>
                Notificación de Cambios
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="wrapChanges">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-change">Nuevo Registro</a>
            <table id="changeTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th width="100px">
                            Fecha
                        </th>
                        <th width="100px">
                            Revisión
                        </th>
                        <th width="100px">
                            Paginas Afectadas
                        </th>
                        <th>
                            Originador
                        </th>
                        <th>
                            Naturaleza del cambio
                        </th>

                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="change-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>

                        <td align="center">
                            <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                Editar
                            </a>
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>

    <!--Aprobacion-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionApproval">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                <a href="javascript:toggleComponent('btn-toggleApproval', 'wrapApproval')" id="btn-toggleApproval">-</a>
                Aprobación
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2" id="wrapApproval">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-approval">Nuevo Registro</a>
            <table id="approvalTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th>
                            Elaborado por
                        </th>
                        <th>
                            Gerente del Area
                        </th>
                        <th>
                            Director del Area
                        </th>
                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="approval-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>
                        <td></td>

                        <td align="center">
                            <a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                Editar
                            </a>
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>

    <!--Permisos-->
    <section class="bg-light text-dark border-custom mb-4" id="sectionPermission">
        <div class="bg-secondary text-light panel-custom border">
            <h6 class="panel-title">
                Permisos para visualizar este documento
            </h6>
        </div>
        <div class="mt-3 ml-2 mr-2">
            <a href="javascript:void(0);" class="btn btn-danger btn-sm btn-new-permission">Nuevo Registro</a>
            <table id="permissionTable" class="table table-striped table-bordered table-condensed table-sm mt-1">
                <thead class="bg-warning">
                    <tr>
                        <th>
                            Permisos A:
                        </th>
                        <th>
                            Otorgado En Fecha:
                        </th>
                        <th class="action-column"></th>
                    </tr>
                </thead>
                <tbody id="permission-tbody">
                    <tr hidden="hidden">
                        <td></td>
                        <td></td>

                        <td align="center">
                            @*<a class="btn btn-sm btn-success edit-btn" href="javascript:void(0)" title="Editar">
                                    Editar
                                </a>*@
                            <a class="btn btn-sm btn-danger btn-remove" href="javascript:void(0)" title="Eliminar">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>
    <a href="/Documento/VistaPreliminar/" class="btn btn-danger btn-preview" target="_blank">Vista preliminar</a>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/dataTables.bootstrap4.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="~/Scripts/toastr.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>
    <script src="https://cdn.tiny.cloud/1/ooprn6x3slemw47jqbeenlvfu5msrfxpjpktjpllexhn4eqw/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
}
<script type="text/javascript">
    var processing = false;
    var processingProcedures = false;
    var processingGuidelines = false;
    var _employees = @Html.Raw(employeesJson);
    var _users = @Html.Raw(usersJson);

    $(document).ready(async function () {
        //Variables
        var wordGlossaryEditing = "";
        var descriptionGlossaryEditing = "";
        var sortindexGuidelineEditing = "";
        var descriptionGuidelineEditing = "";
        var sortindexProcedureEditing = "";
        var responsibleProcedureEditing = "";
        var descriptionProcedureEditing = "";
        var changeDateChangeEditing = "";
        var revisionChangeEditing = "";
        var pagesAffectedChangeEditing = "";
        var originatorChangeEditing = "";
        var natureChangeChangeEditing = "";
        var producedByApprovalEditing = "";
        var managerAreaApprovalEditing = "";
        var directorAreaApprovalEditing = "";
        var quill_contenidoBody;
        var quill_responsabilitiesBody;
        var quill_policyBody;
        var quill_descriptionProcedure;
        var quill_descriptionGuideline;
        var quill_objectiveBody;
        var quill_scopeBody;

        $("#Documents").addClass("menu-active");
        $("#sectionContent").hide();
        $("#sectionScope").hide();
        $("#sectionResponsabilities").hide();
        $("#sectionGlossary").hide();
        $("#sectionGuideline").hide();
        $("#sectionPolicy").hide();
        $("#sectionProcedure").hide();
        $("#sectionReference").hide();
        $("#sectionChange").hide();
        $("#sectionApproval").hide();
        $("#sectionPermission").hide();

        $(".btnDetail").hide();
        $(".btn-preview").hide();

        $(".datepicker").datepicker(
            {
                dateFormat: 'dd/mm/yy',
                //beforeShowDay: $.datepicker.noWeekends
            }
        );

        $("#ReferenceType").change(function (evt) {
            console.log("this,", evt.currentTarget.value)

            if (evt.currentTarget.value === "Link") {
                $("#FileNameDocTextLabel").text("Hipervinculo del documento")
                $("#FileNameDocText").attr("readonly", false);
                $("#SearchFileToUpload").removeClass("fa-search");
                $("#SearchFileToUpload").prop("disabled", true);
            } else {
                $("#FileNameDocTextLabel").text("Nombre de archivo")
                $("#FileNameDocText").attr("readonly", true);
                $("#SearchFileToUpload").addClass("fa-search");
                $("#SearchFileToUpload").prop("disabled", false);
            }
        })

        const _currentEditor = new URLSearchParams(window.location.search).get('editor');
        if (_currentEditor)
            $("#CurrentEditor").val(_currentEditor);

        loadCurrentEditor();

        $("#btnNext").click(async function (evt) {

            const _validateFields = validateFields();
            if (_validateFields) {
                toastr.error(_validateFields);
                return false;
            }

            const objective = await getObjectiveBody();

            const documentHeader = {
                Id: $("#DocumentHeaderId").val(),
                DocumentTypeId: $("#DocumentTypeId").val(),
                Status: $("#Status").val(),
                Image: $("#Logo").val(),
                AttachmentType: $("#AttachmentType :selected").val(),
                Code: $("#DocumentCode :selected").text(),
                Revision: $("#Revision").val(),
                Date: GetEnglishDate($("#docDate").val()),
                Title: $("#Title").val(),
                DirectorateId: $("#DirectorateId").val(),
                DepartmentCode: $("#DepartmentCode").val(),
                AreaId: $("#AreaId").val(),
                MacroprocessId: $("#MacroprocessId").val(),
                ProcessId: $("#ProcessId").val(),
                Objective: objective,
                IsPublic: $("#Visibility :selected").val(),
            }

            console.log('documentHeader:', documentHeader)

            $.ajax({
                url: "/Documento/SaveDocumentHeader",
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: JSON.stringify(documentHeader),
            }).done(function (data) {
                if (data.result === "200") {
                    console.log('Document HEADER saved:', data)
                    applyChangesAccordingToDocumentType();
                    prepareNextSection();

                    const _documentHeaderId = new URLSearchParams(window.location.search).get('id');

                    if (!_documentHeaderId) {
                        window.location = `Documento/Documento?id=${data.message}`;
                    } else {
                        if (!$("#DocumentHeaderId").val())
                            $("#DocumentHeaderId").val(data.message)
                    }

                    toastr.success("El documento fue guardado. Favor continuar");
                } else {
                    toastr.error(data.message);
                }
            });
        });

        $(".btnDetail").click(async function (evt) {
            evt.preventDefault();
            evt.stopPropagation();

            const contenidoBody = await getContentBody();
            const responsabilitiesBody = await getResponsabilitiesBody();
            const policyBody = await getPolicyBody();
            await saveDocumentContent(contenidoBody);
            await saveDocumentDetail(responsabilitiesBody, policyBody);
        });
    });

    async function saveDocumentContent(contenidoBody) {
        const body = contenidoBody ? contenidoBody : "";

        const documentHeaderId = $("#DocumentHeaderId").val();
        const documentContent = { DocumentHeaderId: documentHeaderId, Body: body };

        $.ajax({
            url: `/Documento/SaveDocumentContent`,
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify(documentContent),
        }).done(async function (data) {
            console.log('DATA SaveDocumentContent:', data)

            if (data.result === "200") {
                toastr.success("El contenido del documento fue guardado.");
            } else {
                toastr.error(data.message);
            }
        });
    }

    async function saveDocumentDetail(responsabilitiesBody, policyBody) {
        const scope = await getScopeBody();

        const responsabilities = responsabilitiesBody ? responsabilitiesBody : "";
        const policy = policyBody ? policyBody : "";

        const documentHeaderId = $("#DocumentHeaderId").val();
        const documentDetail = { DocumentHeaderId: documentHeaderId, Scope: scope, Responsabilities: responsabilitiesBody, Policy: policyBody };

        $.ajax({
            url: `/Documento/SaveDocumentDetail`,
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify(documentDetail),
        }).done(async function (data) {
            console.log('DATA SaveDocumentDetail:', data)
            if (data.result === "200") {
                toastr.success("Los detalles del documento fueron guardados.");
            } else {
                toastr.error(data.message);
            }
        });
    }

    async function getAreasByDirectorateId(directorateId, defaultArea = 0) {
        $("#AreaId").empty();
        console.log('defaultArea:', defaultArea)

        $.ajax({
            url: "/Area/GetAreasByDirectorateId?directorateId=" + directorateId,
            "type": "POST",
        }).done(async function (data) {
            if (data.result === "200") {

                for (const option of data.message) {
                    $('#AreaId').append($(`<option value="${option.Value}" ${parseInt(option.Value) === defaultArea ? "selected" : ""}>${option.Text}</option>`));
                }
            }
            else {
                toastr.error(data.message);
            }
        });
    }

    async function getDepartmentsByAreaId(areaId, defaultDepartment = 0) {
        $("#DepartmentCode").empty();

        $.ajax({
            url: "/Departamento/getDepartmentsByAreaId?areaId=" + areaId,
            "type": "POST",
        }).done(async function (data) {
            if (data.result === "200") {

                for (const option of data.message) {
                    $('#DepartmentCode').append($(`<option value="${option.Value}" ${parseInt(option.Value) === defaultDepartment ? "selected" : ""}>${option.Text}</option>`));
                }
            }
            else {
                toastr.error(data.message);
            }
        });
    }

    async function getProcessesByMacroprocessId(macroprocessId, defaultProcess = 0) {
        $("#ProcessId").empty();

        $.ajax({
            url: "/Proceso/getProcessesByMacroprocessId?macroprocessId=" + macroprocessId,
            "type": "POST",
        }).done(async function (data) {
            if (data.result === "200") {

                for (const option of data.message) {
                    $('#ProcessId').append($(`<option value="${option.Value}" ${parseInt(option.Value) === defaultProcess ? "selected" : ""}>${option.Text}</option>`));
                }
            }
            else {
                toastr.error(data.message);
            }
        });
    }

    async function getDocument(documentHeaderId) {

        if (processing === true) return false;

        processing = true;

        $.ajax({
            url: `/Documento/GetDocument?documentHeaderId=${documentHeaderId}`,
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            dataType: 'json'
        }).done(async function (data) {
            console.log('DATA getDocument:', data, " Time:", new Date());

            const documentHeader = data.message.documentHeader;
            const documentDetail = data.message.documentDetail;
            const documentContent = data.message.documentContent;

            await getAreasByDirectorateId(documentHeader.DirectorateId, documentHeader.AreaId);
            await getDepartmentsByAreaId(documentHeader.AreaId, documentHeader.DepartmentCode);
            await getProcessesByMacroprocessId(documentHeader.MacroprocessId, documentHeader.ProcessId);

            $("#DocumentTypeId").val(documentHeader.DocumentTypeId);

            if (documentHeader.AttachmentType !== null)
                $("#AttachmentType").val(`${documentHeader.AttachmentType}`);

            if (documentHeader.IsPublic !== null)
                $("#Visibility").val(`${documentHeader.IsPublic}`);

            const documentCodeValue = $('#DocumentCode option').filter(function () { return $(this).html() == documentHeader.Code; }).val();
            $("#DocumentCode").val(documentCodeValue);

            $("#Revision").val(documentHeader.Revision);
            $("#docDate").val(documentHeader.Date);
            $("#Logo").val(documentHeader.Image);
            $("#Status").val(documentHeader.Status);

            $("#Title").val(documentHeader.Title);
            $("#DirectorateId").val(documentHeader.DirectorateId);
            $("#AreaId").val(documentHeader.AreaId);
            $("#DepartmentCode").val(documentHeader.DepartmentCode);
            $("#MacroprocessId").val(documentHeader.MacroprocessId);
            $("#ProcessId").val(documentHeader.ProcessId);

            if (documentHeader.Objective)
                await setObjectiveBody(documentHeader.Objective);
            
            if (documentContent && documentContent.Body)
                await setContentBody(documentContent.Body)
            else
                toggleComponent('btn-toggleContenido', 'wrapContenido');

            if (documentDetail) {
                if (documentDetail.Scope)
                    await setScopeBody(documentDetail.Scope);
                else
                    toggleComponent('btn-toggleScope', 'wrapScope');
              
                if (documentDetail.Responsabilities)
                    await setResponsabilitiesBody(documentDetail.Responsabilities);
                else
                    toggleComponent('btn-toggleResponsabilities', 'wrapResponsabilities');

                if (documentDetail.Policy)
                    await setPolicyBody(documentDetail.Policy);
                else
                    toggleComponent('btn-togglePolicy', 'wrapPolicy');
            }

            $(".btnDetail").show();
            $(".btn-preview").show();
            $(".btn-preview").prop("href", `/Documento/VistaPreliminar/${documentHeader.Id}`);

            applyChangesAccordingToDocumentType();
            prepareNextSection();
            getGlossary();
            getGuideline();
            getProcedure();
            getUploadedFiles();
            getChanges();
            getApprovals();
            getPermissions();

            processing = false;
        });
    }

    async function loadCurrentEditor() {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            loadTinyEditor();
        else {
            await loadQuillEditor();
            const _documentHeaderId = new URLSearchParams(window.location.search).get('id');

            if (_documentHeaderId) {
                $("#DocumentHeaderId").val(_documentHeaderId);
                await getDocument(_documentHeaderId);
            }
        }
    }

    async function loadTinyEditor() {
        tinymce.init({
            selector: '.tinyEditor',
            menubar: false,
            plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount linkchecker',
            toolbar: 'undo redo | fontfamily fontsize | bold italic underline strikethrough | table | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat',
            //autoresize_bottom_margin: 20, // Optional: Margin at the bottom of the editor
            //autoresize_min_height: 200,  // Optional: Minimum height of the editor
            //autoresize_max_height: 500,  // Optional: Maximum height of the editor
            setup: async function (editor) {
                editor.on('init', async function (e) {
                    const _documentHeaderId = new URLSearchParams(window.location.search).get('id');
                    console.log('DOCU:::::', _documentHeaderId)
                    if (_documentHeaderId) {
                        $("#DocumentHeaderId").val(_documentHeaderId);
                        await getDocument(_documentHeaderId);
                    }

                    //if (editor.iframeElement.contentWindow.document.body.scrollHeight < 500) {
                    //    editor.settings.autoresize_min_height = 150; // Minimum height
                    //    editor.settings.autoresize_max_height = 500; // Maximum height
                    //} else {
                    //    editor.settings.autoresize = false;
                    //}
                });
            },
            //init_instance_callback: function (editor) {
            //    editor.on('NodeChange SetContent', function (e) {
            //        if (editor.iframeElement.contentWindow.document.body.scrollHeight < 500) {
            //            editor.settings.autoresize_min_height = 150;
            //            editor.settings.autoresize_max_height = 500;
            //            editor.getBody().style.height = '';
            //            tinymce.activeEditor.execCommand('mceAutoResize');
            //        } else {
            //            editor.getBody().style.height = '500px';
            //        }
            //    });
            //}
        });
    }

    async function loadQuillEditor() {
        var toolbarOptions = [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['image'],
            [{ 'header': 1 }, { 'header': 2 }],               // custom button values
            [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'list': 'check' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
            [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
            [{ 'direction': 'rtl' }],                         // text direction

            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'font': [] }],
            [{ 'align': [] }],

            ['clean'],
        ];

        quill_contenidoBody = new Quill('#contenidoBody', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_responsabilitiesBody = new Quill('#responsabilitiesBody', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_policyBody = new Quill('#policyBody', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_descriptionProcedure = new Quill('#description-procedure', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_descriptionGuideline = new Quill('#description-guideline', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_objectiveBody = new Quill('#objectiveBody', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        quill_scopeBody = new Quill('#scopeBody', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });
    }

    //Content BODY
    async function getContentBody() {
        const currentEditor = $("#CurrentEditor").val();
        let value = "";

        if (currentEditor === "Tiny")
            value = tinymce.get("contenidoBody").getContent();
        else
            value = quill_contenidoBody.root.innerHTML;

        return value ? value : "";
    }

    async function setContentBody(value) {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            tinymce.get("contenidoBody").setContent(value);
        else
            quill_contenidoBody.root.innerHTML = value;
    }

    //Responsabilities BODY
    async function getResponsabilitiesBody() {
        const currentEditor = $("#CurrentEditor").val();
        let value = "";

        if (currentEditor === "Tiny")
            value = tinymce.get("responsabilitiesBody").getContent();
        else
            value = quill_responsabilitiesBody.root.innerHTML;

        return value ? value : "";
    }

    async function setResponsabilitiesBody(value) {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            tinymce.get("responsabilitiesBody").setContent(value);
        else
            quill_responsabilitiesBody.root.innerHTML = value;
    }

    //Policy BODY
    async function getPolicyBody() {
        const currentEditor = $("#CurrentEditor").val();
        let value = "";

        if (currentEditor === "Tiny")
            value = tinymce.get("policyBody").getContent();
        else
            value = quill_policyBody.root.innerHTML;

        return value ? value : "";
    }

    async function setPolicyBody(value) {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            tinymce.get("policyBody").setContent(value);
        else
            quill_policyBody.root.innerHTML = value;
    }

    //Objective BODY
    async function getObjectiveBody() {
        const currentEditor = $("#CurrentEditor").val();
        let value = "";

        if (currentEditor === "Tiny")
            value = tinymce.get("objectiveBody").getContent();
        else
            value = quill_objectiveBody.root.innerHTML;

        return value ? value : "";
    }

    async function setObjectiveBody(value) {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            tinymce.get("objectiveBody").setContent(value);
        else
            quill_objectiveBody.root.innerHTML = value;
    }

    //Scope BODY
    async function getScopeBody() {
        const currentEditor = $("#CurrentEditor").val();
        let value = "";

        if (currentEditor === "Tiny")
            value = tinymce.get("scopeBody").getContent();
        else
            value = quill_scopeBody.root.innerHTML;

        return value ? value : "";
    }

    async function setScopeBody(value) {
        const currentEditor = $("#CurrentEditor").val();

        if (currentEditor === "Tiny")
            tinymce.get("scopeBody").setContent(value);
        else
            quill_scopeBody.root.innerHTML = value;
    }

    function validateFields() {
        if (!$("#DocumentTypeId").val())
            return "Debe seleccionar un tipo de documento";

        if (!$("#DocumentCode").val())
            return "Debe seleccionar un código de documento";

        if (!$("#Revision").val())
            return "Debe especificar la revisión";

        if (!$("#docDate").val())
            return "Debe especificar una fecha válida";

        if (!$("#Title").val())
            return "Debe digitar un titulo";

        if (!$("#DirectorateId").val())
            return "Debe seleccionar la dirección";

        if (!$("#AreaId").val())
            return "Debe seleccionar el área";

        if (!$("#DepartmentCode").val())
            return "Debe seleccionar el departamento";

        if (!$("#MacroprocessId").val())
            return "Debe seleccionar un macroproceso";

        if (!$("#ProcessId").val())
            return "Debe seleccionar un proceso";
    }

    function applyChangesAccordingToDocumentType() {
        $(".btnDetail").show();

        //Document Type: INSTRUCTIVO and DIAGRAMA
        if ($("#DocumentTypeId :selected").text().toUpperCase().includes("INSTRUCTIVO")
            || $("#DocumentTypeId :selected").text().toUpperCase().includes("DIAGRAMA")) {
            $("#contentLabel").text("Pasos");
            $("#sectionContent").show();
            $(".btnDetail").hide();
            $("#btnDetail").show();
            $("#sectionPermission").show();
        }

        //Document Type: ONLY ATTACHED DOCUMENT
        if ($("#AttachmentType :selected").val() === "true") {
            $("#sectionReference").show();
            $("#sectionPermission").show();
            $(".btnDetail").hide();
            //$("#btnDetail").show();
        }
    }

    function prepareNextSection() {
        $("#btnNext").text("Guardar cambios en la cabecera");

        if (!$("#DocumentTypeId :selected").text().toUpperCase().includes("INSTRUCTIVO") &&
            !$("#DocumentTypeId :selected").text().toUpperCase().includes("DIGRAMA") &&
            $("#AttachmentType :selected").val() !== "true"
            ) {
            $("#sectionContent").show();
            $("#sectionScope").show();
            $("#sectionResponsabilities").show();
            $("#sectionGlossary").show();
            $("#sectionGuideline").show();
            $("#sectionPolicy").show();
            $("#sectionProcedure").show();
            $("#sectionReference").show();
            $("#sectionChange").show();
            $("#sectionApproval").show();
            $("#sectionPermission").show();
        }
    }

    async function toggleComponent(button, section) {
        if ($(`#${button}`).html() === "-") {
            $(`#${button}`).html("+");
            $(`#${section}`).fadeOut(300);
        } else {
            $(`#${button}`).html("-");
            $(`#${section}`).fadeIn(300);
        }
    }

    function ResizeDescriptionTextarea(textareaToResize) {
        var $textarea = $(`#${textareaToResize}`);

        function resizeTextarea($textarea) {
            if ($textarea && $textarea[0]) {
                $textarea.css('height', 'auto');
                $textarea.css('height', $textarea[0].scrollHeight + 'px');
            }
        }

        resizeTextarea($textarea);

        $textarea.on('input', function () {
            resizeTextarea($(this));
        });
    }

    function GetEnglishDate(date) {
        if (date && date !== null) {
            const dateArray = date.split("/");
            return `${dateArray[1]}-${dateArray[0]}-${dateArray[2]}`;
        }

        return "";
    }

</script>

<script src="~/Scripts/doc-glossary.js"></script>
<script src="~/Scripts/doc-guideline.js"></script>
<script src="~/Scripts/doc-procedure.js"></script>
<script src="~/Scripts/doc-references.js"></script>
<script src="~/Scripts/doc-change.js"></script>
<script src="~/Scripts/doc-approval.js"></script>
<script src="~/Scripts/doc-permission.js"></script>